"use strict";

var h = require("react").createElement;
var path = require("path");

module.exports = function HTMLReportPage(props) {
  var body = props.reportType == "sourcefile" ?
        HTMLReportBodySourceFile : HTMLReportBodySummary;

  return h(
    'html', null,
    h(HTMLReportHead, props),
    h(body, props)
  );
};

function HTMLReportHead(props) {
  var links = !props.assets || !props.assets.css ?
    [] : props.assets.css.map(function (css) {
      return h('link', {
        key: css,
        rel: "stylesheet",
        href: css
      });
    });
  var scripts = !props.assets || !props.assets.js ?
    [] : props.assets.js.map(function (js) {
      return h('script', {
        key: js,
        src: js
      });
    });
  var charset = h('meta', {key: "charset", charSet: "utf-8"});
  return h(
    'head', null,
    [charset].concat(links, scripts)
  );
}

function HTMLReportFooter(props) {
  return h(
    'footer', null,
    "Flow Coverage Report generated by ",
    h('a', { href: "https://flowtype.org"}, "flow"),
    " and ",
    h('a', { href: "https://github.com/rpl/flow-coverage-report"},
      "flow-coverage-report"),
    " at ",
    props.coverageGeneratedAt
  );
}

function FlowCoverageSummaryTable(props) {
  var summary = props.coverageSummaryData;
  var percent = Math.floor(
    summary.covered_count / (summary.covered_count + summary.uncovered_count) * 100
  );
  var threshold = props.threshold || 80;
  var className = percent >= threshold ? "positive" : "negative";

  return h(
    'table', {className: "ui small celled table"},
    h(
      'thead', null,
      h('tr', null, [
        h('th', {key: "percent"}, "Percent"),
        h('th', {key: "total"}, "Total"),
        h('th', {key: "covered"}, "Covered"),
        h('th', {key: "uncovered"}, "Uncovered")
      ])
    ),
    h(
      'tbody', null, h('tr', {className: className}, [
        h('td', {key: "percent"}, percent + " %"
         ),
        h('td', {key: "total"}, summary.covered_count + summary.uncovered_count),
        h('td', {key: "covered"}, summary.covered_count),
        h('td', {key: "uncovered"}, summary.uncovered_count)
      ])
    )
  );
}

function FlowCoverageFileTableHead() {
  return h(
    'thead', null,
    h('tr', null, [
      h('th', {key: "filename", className: "sorted ascending"}, "Filename"),
      h('th', {key: "percent"}, "Percent"),
      h('th', {key: "total"}, "Total"),
      h('th', {key: "covered"}, "Covered"),
      h('th', {key: "uncovered"}, "Uncovered")
    ])
  );
}

function FlowCoverageFileTableRow(props) {
  var filename = props.filename;
  var covered_count = props.covered_count;
  var uncovered_count = props.uncovered_count;
  var disableLink = props.disableLink;
  var threshold = props.threshold || 80;

  var percent = Math.floor(
    covered_count / (covered_count + uncovered_count) * 100
  );

  // NOTE: if there are no lines to cover, defaults to 100
  percent = covered_count == 0 && uncovered_count == 0 ? 100 : percent;

  return h(
    'tr', {
      key: filename,
      className: (
        percent >= threshold ? "positive" : "negative"
      )
    },
    [
      h(
        'td', {
          key: "filename",
          className: (
            disableLink ? "" : "selectable"
          )
        },
        (disableLink ? filename : h(LinkToSourceFileReport, {targetFilename: filename}))
      ),
      h('td', {key: "percent"},
        percent + " %"
       ),
      h('td', {key: "total"}, covered_count + uncovered_count),
      h('td', {key: "covered"}, covered_count),
      h('td', {key: "uncovered"}, uncovered_count)
    ]
  );
}


function HTMLReportBodySummary(props) {
  var summary = props.coverageSummaryData;
  var filenames = Object.keys(props.coverageSummaryData.files).sort();

  var filesSummaryTable = h(
    'table', {className: "ui small celled table sortable"},
    h(FlowCoverageFileTableHead, null),
    h(
      'tbody', null, filenames.map(function (filename) {
        var fileSummary = summary.files[filename];

        return h(FlowCoverageFileTableRow, {
          key: filename,
          filename: filename,
          covered_count: fileSummary.covered_count,
          uncovered_count: fileSummary.uncovered_count,
        });
      })
    )
  );

  return h(
    'body', null,
    h(
      'div', {className: "ui grid container"},
      h(
        'div', {className: "row"},
        h('h1', null, "Flow Coverage Report - Summary")
      ),
      h(
        'div', {className: "row"},
        h(FlowCoverageSummaryTable, props)
      ),
      h(
        'div', {className: "row"},
        filesSummaryTable
      ),
      h(
        'div', {className: "row centered"},
        h(HTMLReportFooter, props)
      )
    )
  );
}

function LinkToSourceFileReport(props) {
  let filename = props.targetFilename;

  return h(
    'a', {href: filename + ".html"}, filename
  );
}

function FlowCoverageLocsForm(props) {
  var uncovered_locs = props.uncovered_locs;

  return h(
    'div', {className: "ui form"},
    h(
      'div', {className: "fields"},
      h(
        'div', {key: "uncovered-locs-dropdown", className: "sixteen wide inline field"},
        h(
          'select', {className: "ui search dropdown uncovered-locations"},
          [
            h('option', {key: "placeholder", value: ""}, "Uncovered Locations")
          ].concat(
            uncovered_locs.map(function (loc, i) {
              var text = "Start: " + [loc.start.line, loc.start.column].join(",") + " - " +
                    "End: " + [loc.end.line, loc.end.column].join(",");
              var value = loc.start.line;

              return h('option', {key: i, value: value}, text);
            })
          )
        )
      ),
      h(
        'div', {key: "syntax-highlighting-dropdown", className: "four wide inline field"},
        h(
          'select', {className: "ui search dropdown syntax-highlighting"},
          [
            h('option', {key: "es", value: "es"}, "ES6/ES7"),
            h('option', {key: "js", value: "js"}, "JavaScript"),
            h('option', {key: "no", value: "no"}, "None")
          ]
        )
      )
    )
  );
}

function HTMLReportBodySourceFile(props) {
  var fileName = props.fileName;
  var fileContent = props.fileContent;
  var coverageData = props.coverageData;
  var summaryRelLink = props.summaryRelLink;

  coverageData.expressions.uncovered_locs =
    coverageData.expressions.uncovered_locs.map(function (loc) {
      delete loc.source;
      return loc;
    });

  return h(
    'body', null,
    h('div', {className: "ui grid container"},
      h(
        'div', {className: "row"},
        h('h1', {className: "twelve wide column"}, "Flow Coverage Report - " + fileName),
        h(
          'div', {className: "four wide column", style: {height: 32}},
          h('a', {href: summaryRelLink, id: "link-to-summary"}, "Go back to all files summary.")
        )
      ),
      h(
        'div', {className: "row"},
        h(
          'table', {className: "ui small celled unstackable table"},
          h(FlowCoverageFileTableHead),
          h('tbody', null, h(FlowCoverageFileTableRow, {
            disableLink: true,
            filename: fileName,
            covered_count: coverageData.expressions.covered_count,
            uncovered_count: coverageData.expressions.uncovered_count,
          }))
        )
      ),
      h(
        'div', {className: "row ui one column centered grid"},
        h(
          'div', {className: "column", style: {textAlign: "left"}},
          h(
            'div', {className: "row"},
            h(FlowCoverageLocsForm, {uncovered_locs: coverageData.expressions.uncovered_locs})
          ),
          h('textarea', {
            id: "file-content",
            value: String(fileContent),
            readOnly: true
          })
        )
      ),
      h(
        'div', {className: "row centered"},
        h(HTMLReportFooter, props)
      )
    ),
    h('pre', {id: "file-coverage-data", style: {display: "none"}},
      JSON.stringify(coverageData))
  );
}
